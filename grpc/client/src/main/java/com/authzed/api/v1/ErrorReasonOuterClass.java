// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authzed/api/v1/error_reason.proto
package com.authzed.api.v1;

public final class ErrorReasonOuterClass {

    private ErrorReasonOuterClass() {
    }

    public static void registerAllExtensions(com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions((com.google.protobuf.ExtensionRegistryLite) registry);
    }

    /**
     * <pre>
     * Defines the supported values for `google.rpc.ErrorInfo.reason` for the
     * `authzed.com` error domain.
     * </pre>
     *
     * Protobuf enum {@code authzed.api.v1.ErrorReason}
     */
    public enum ErrorReason implements com.google.protobuf.ProtocolMessageEnum {

        /**
         * <pre>
         * Do not use this default value.
         * </pre>
         *
         * <code>ERROR_REASON_UNSPECIFIED = 0;</code>
         */
        ERROR_REASON_UNSPECIFIED(0),
        /**
         * <pre>
         * The request gave a schema that could not be parsed.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_SCHEMA_PARSE_ERROR",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "start_line_number": "1",
         *         "start_column_position": "19",
         *         "end_line_number": "1",
         *         "end_column_position": "19",
         *         "source_code": "somedefinition",
         *       }
         *     }
         *
         * The line numbers and column positions are 0-indexed and may not be present.
         * </pre>
         *
         * <code>ERROR_REASON_SCHEMA_PARSE_ERROR = 1;</code>
         */
        ERROR_REASON_SCHEMA_PARSE_ERROR(1),
        /**
         * <pre>
         * The request contains a schema with a type error.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_SCHEMA_TYPE_ERROR",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         ... additional keys based on the kind of type error ...
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_SCHEMA_TYPE_ERROR = 2;</code>
         */
        ERROR_REASON_SCHEMA_TYPE_ERROR(2),
        /**
         * <pre>
         * The request referenced an unknown object definition in the schema.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_UNKNOWN_DEFINITION",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition"
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_UNKNOWN_DEFINITION = 3;</code>
         */
        ERROR_REASON_UNKNOWN_DEFINITION(3),
        /**
         * <pre>
         * The request referenced an unknown relation or permission under a definition in the schema.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         "relation_or_permission_name": "somepermission"
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION = 4;</code>
         */
        ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION(4),
        /**
         * <pre>
         * The WriteRelationships request contained more updates than the maximum configured.
         *
         * Example of an ErrorInfo:
         *
         *     { "reason": "ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "update_count": "525",
         *         "maximum_updates_allowed": "500",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST = 5;</code>
         */
        ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST(5),
        /**
         * <pre>
         * The request contained more preconditions than the maximum configured.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "precondition_count": "525",
         *         "maximum_preconditions_allowed": "500",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST = 6;</code>
         */
        ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST(6),
        /**
         * <pre>
         * The request contained a precondition that failed.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "precondition_resource_type": "document",
         *         ... other fields for the filter ...
         *         "precondition_operation": "MUST_EXIST",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE = 7;</code>
         */
        ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE(7),
        /**
         * <pre>
         * A write or delete request was made to an instance that is deployed in read-only mode.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_SERVICE_READ_ONLY",
         *       "domain": "authzed.com"
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_SERVICE_READ_ONLY = 8;</code>
         */
        ERROR_REASON_SERVICE_READ_ONLY(8),
        /**
         * <pre>
         * The request referenced an unknown caveat in the schema.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_UNKNOWN_CAVEAT",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "caveat_name": "somecaveat"
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_UNKNOWN_CAVEAT = 9;</code>
         */
        ERROR_REASON_UNKNOWN_CAVEAT(9),
        /**
         * <pre>
         * The request tries to use a subject type that was not valid for a relation.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_INVALID_SUBJECT_TYPE",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         "relation_name": "somerelation",
         *         "subject_type": "user:*"
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_INVALID_SUBJECT_TYPE = 10;</code>
         */
        ERROR_REASON_INVALID_SUBJECT_TYPE(10),
        /**
         * <pre>
         * The request tries to specify a caveat parameter value with the wrong type.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         "relation_name": "somerelation",
         *         "caveat_name": "somecaveat",
         *         "parameter_name": "someparameter",
         *         "expected_type": "int",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR = 11;</code>
         */
        ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR(11),
        /**
         * <pre>
         * The request tries to perform two or more updates on the same relationship in the same WriteRelationships call.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         "relationship": "somerelationship",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP = 12;</code>
         */
        ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP(12),
        /**
         * <pre>
         * The request tries to write a relationship on a permission instead of a relation.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_CANNOT_UPDATE_PERMISSION",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         "permission_name": "somerelation",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_CANNOT_UPDATE_PERMISSION = 13;</code>
         */
        ERROR_REASON_CANNOT_UPDATE_PERMISSION(13),
        /**
         * <pre>
         * The request failed to evaluate a caveat expression due to an error.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_CAVEAT_EVALUATION_ERROR",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "caveat_name": "somecaveat",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_CAVEAT_EVALUATION_ERROR = 14;</code>
         */
        ERROR_REASON_CAVEAT_EVALUATION_ERROR(14),
        /**
         * <pre>
         * The request failed because the provided cursor was invalid in some way.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_INVALID_CURSOR",
         *       "domain": "authzed.com",
         *       "metadata": {
         *          ... additional keys based on the kind of cursor error ...
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_INVALID_CURSOR = 15;</code>
         */
        ERROR_REASON_INVALID_CURSOR(15),
        /**
         * <pre>
         * The request failed because there are too many matching relationships to be
         * deleted within a single transactional deletion call. To avoid, set
         * `optional_allow_partial_deletions` to true on the DeleteRelationships call.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE",
         *       "domain": "authzed.com",
         *       "metadata": {
         *          ... fields for the filter ...
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE = 16;</code>
         */
        ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE(16),
        /**
         * <pre>
         * The request failed because the client attempted to write a relationship
         * with a context that exceeded the configured server limit.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "relationship":     "relationship_exceeding_the_limit",
         *         "max_allowed_size": "server_max_allowed_context_size",
         *         "context_size":     "actual_relationship_context_size" ,
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE = 17;</code>
         */
        ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE(17),
        /**
         * <pre>
         * The request failed because a relationship marked to be CREATEd
         * was already present within the datastore.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "relationship":          "relationship_that_already_existed",
         *         "resource_type":         "resource type",
         *         "resource_object_id":    "resource object id",
         *         ... additional decomposed relationship fields ...
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP = 18;</code>
         */
        ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP(18),
        /**
         * <pre>
         * The request failed because it caused the maximum depth allowed to be
         * exceeded. This typically indicates that there is a circular data traversal
         * somewhere in the schema, but can also be raised if the data traversal is simply
         * too deep.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "maximum_depth_allowed": "50",
         *         ... additional fields based on request type ...
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED = 19;</code>
         */
        ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED(19),
        /**
         * <pre>
         * The request failed due to a serialization error in the backend database.
         * This typically indicates that various in flight transactions conflicted with each other
         * and the database had to abort one or more of them. SpiceDB will retry a few times before returning
         * the error to the client.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_SERIALIZATION_FAILURE",
         *       "domain": "authzed.com",
         *       "metadata": {}
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_SERIALIZATION_FAILURE = 20;</code>
         */
        ERROR_REASON_SERIALIZATION_FAILURE(20),
        /**
         * <pre>
         * The request contained more check items than the maximum configured.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "check_count": "525",
         *         "maximum_checks_allowed": "500",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST = 21;</code>
         */
        ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST(21),
        UNRECOGNIZED(-1);

        /**
         * <pre>
         * Do not use this default value.
         * </pre>
         *
         * <code>ERROR_REASON_UNSPECIFIED = 0;</code>
         */
        public static final int ERROR_REASON_UNSPECIFIED_VALUE = 0;

        /**
         * <pre>
         * The request gave a schema that could not be parsed.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_SCHEMA_PARSE_ERROR",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "start_line_number": "1",
         *         "start_column_position": "19",
         *         "end_line_number": "1",
         *         "end_column_position": "19",
         *         "source_code": "somedefinition",
         *       }
         *     }
         *
         * The line numbers and column positions are 0-indexed and may not be present.
         * </pre>
         *
         * <code>ERROR_REASON_SCHEMA_PARSE_ERROR = 1;</code>
         */
        public static final int ERROR_REASON_SCHEMA_PARSE_ERROR_VALUE = 1;

        /**
         * <pre>
         * The request contains a schema with a type error.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_SCHEMA_TYPE_ERROR",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         ... additional keys based on the kind of type error ...
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_SCHEMA_TYPE_ERROR = 2;</code>
         */
        public static final int ERROR_REASON_SCHEMA_TYPE_ERROR_VALUE = 2;

        /**
         * <pre>
         * The request referenced an unknown object definition in the schema.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_UNKNOWN_DEFINITION",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition"
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_UNKNOWN_DEFINITION = 3;</code>
         */
        public static final int ERROR_REASON_UNKNOWN_DEFINITION_VALUE = 3;

        /**
         * <pre>
         * The request referenced an unknown relation or permission under a definition in the schema.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         "relation_or_permission_name": "somepermission"
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION = 4;</code>
         */
        public static final int ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION_VALUE = 4;

        /**
         * <pre>
         * The WriteRelationships request contained more updates than the maximum configured.
         *
         * Example of an ErrorInfo:
         *
         *     { "reason": "ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "update_count": "525",
         *         "maximum_updates_allowed": "500",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST = 5;</code>
         */
        public static final int ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST_VALUE = 5;

        /**
         * <pre>
         * The request contained more preconditions than the maximum configured.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "precondition_count": "525",
         *         "maximum_preconditions_allowed": "500",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST = 6;</code>
         */
        public static final int ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST_VALUE = 6;

        /**
         * <pre>
         * The request contained a precondition that failed.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "precondition_resource_type": "document",
         *         ... other fields for the filter ...
         *         "precondition_operation": "MUST_EXIST",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE = 7;</code>
         */
        public static final int ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE_VALUE = 7;

        /**
         * <pre>
         * A write or delete request was made to an instance that is deployed in read-only mode.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_SERVICE_READ_ONLY",
         *       "domain": "authzed.com"
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_SERVICE_READ_ONLY = 8;</code>
         */
        public static final int ERROR_REASON_SERVICE_READ_ONLY_VALUE = 8;

        /**
         * <pre>
         * The request referenced an unknown caveat in the schema.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_UNKNOWN_CAVEAT",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "caveat_name": "somecaveat"
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_UNKNOWN_CAVEAT = 9;</code>
         */
        public static final int ERROR_REASON_UNKNOWN_CAVEAT_VALUE = 9;

        /**
         * <pre>
         * The request tries to use a subject type that was not valid for a relation.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_INVALID_SUBJECT_TYPE",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         "relation_name": "somerelation",
         *         "subject_type": "user:*"
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_INVALID_SUBJECT_TYPE = 10;</code>
         */
        public static final int ERROR_REASON_INVALID_SUBJECT_TYPE_VALUE = 10;

        /**
         * <pre>
         * The request tries to specify a caveat parameter value with the wrong type.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         "relation_name": "somerelation",
         *         "caveat_name": "somecaveat",
         *         "parameter_name": "someparameter",
         *         "expected_type": "int",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR = 11;</code>
         */
        public static final int ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR_VALUE = 11;

        /**
         * <pre>
         * The request tries to perform two or more updates on the same relationship in the same WriteRelationships call.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         "relationship": "somerelationship",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP = 12;</code>
         */
        public static final int ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP_VALUE = 12;

        /**
         * <pre>
         * The request tries to write a relationship on a permission instead of a relation.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_CANNOT_UPDATE_PERMISSION",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "definition_name": "somedefinition",
         *         "permission_name": "somerelation",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_CANNOT_UPDATE_PERMISSION = 13;</code>
         */
        public static final int ERROR_REASON_CANNOT_UPDATE_PERMISSION_VALUE = 13;

        /**
         * <pre>
         * The request failed to evaluate a caveat expression due to an error.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_CAVEAT_EVALUATION_ERROR",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "caveat_name": "somecaveat",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_CAVEAT_EVALUATION_ERROR = 14;</code>
         */
        public static final int ERROR_REASON_CAVEAT_EVALUATION_ERROR_VALUE = 14;

        /**
         * <pre>
         * The request failed because the provided cursor was invalid in some way.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_INVALID_CURSOR",
         *       "domain": "authzed.com",
         *       "metadata": {
         *          ... additional keys based on the kind of cursor error ...
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_INVALID_CURSOR = 15;</code>
         */
        public static final int ERROR_REASON_INVALID_CURSOR_VALUE = 15;

        /**
         * <pre>
         * The request failed because there are too many matching relationships to be
         * deleted within a single transactional deletion call. To avoid, set
         * `optional_allow_partial_deletions` to true on the DeleteRelationships call.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE",
         *       "domain": "authzed.com",
         *       "metadata": {
         *          ... fields for the filter ...
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE = 16;</code>
         */
        public static final int ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE_VALUE = 16;

        /**
         * <pre>
         * The request failed because the client attempted to write a relationship
         * with a context that exceeded the configured server limit.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "relationship":     "relationship_exceeding_the_limit",
         *         "max_allowed_size": "server_max_allowed_context_size",
         *         "context_size":     "actual_relationship_context_size" ,
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE = 17;</code>
         */
        public static final int ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE_VALUE = 17;

        /**
         * <pre>
         * The request failed because a relationship marked to be CREATEd
         * was already present within the datastore.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "relationship":          "relationship_that_already_existed",
         *         "resource_type":         "resource type",
         *         "resource_object_id":    "resource object id",
         *         ... additional decomposed relationship fields ...
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP = 18;</code>
         */
        public static final int ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP_VALUE = 18;

        /**
         * <pre>
         * The request failed because it caused the maximum depth allowed to be
         * exceeded. This typically indicates that there is a circular data traversal
         * somewhere in the schema, but can also be raised if the data traversal is simply
         * too deep.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "maximum_depth_allowed": "50",
         *         ... additional fields based on request type ...
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED = 19;</code>
         */
        public static final int ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED_VALUE = 19;

        /**
         * <pre>
         * The request failed due to a serialization error in the backend database.
         * This typically indicates that various in flight transactions conflicted with each other
         * and the database had to abort one or more of them. SpiceDB will retry a few times before returning
         * the error to the client.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_SERIALIZATION_FAILURE",
         *       "domain": "authzed.com",
         *       "metadata": {}
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_SERIALIZATION_FAILURE = 20;</code>
         */
        public static final int ERROR_REASON_SERIALIZATION_FAILURE_VALUE = 20;

        /**
         * <pre>
         * The request contained more check items than the maximum configured.
         *
         * Example of an ErrorInfo:
         *
         *     {
         *       "reason": "ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST",
         *       "domain": "authzed.com",
         *       "metadata": {
         *         "check_count": "525",
         *         "maximum_checks_allowed": "500",
         *       }
         *     }
         * </pre>
         *
         * <code>ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST = 21;</code>
         */
        public static final int ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST_VALUE = 21;

        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalArgumentException("Can't get the number of an unknown enum value.");
            }
            return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ErrorReason valueOf(int value) {
            return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static ErrorReason forNumber(int value) {
            switch (value) {
                case 0:
                    return ERROR_REASON_UNSPECIFIED;
                case 1:
                    return ERROR_REASON_SCHEMA_PARSE_ERROR;
                case 2:
                    return ERROR_REASON_SCHEMA_TYPE_ERROR;
                case 3:
                    return ERROR_REASON_UNKNOWN_DEFINITION;
                case 4:
                    return ERROR_REASON_UNKNOWN_RELATION_OR_PERMISSION;
                case 5:
                    return ERROR_REASON_TOO_MANY_UPDATES_IN_REQUEST;
                case 6:
                    return ERROR_REASON_TOO_MANY_PRECONDITIONS_IN_REQUEST;
                case 7:
                    return ERROR_REASON_WRITE_OR_DELETE_PRECONDITION_FAILURE;
                case 8:
                    return ERROR_REASON_SERVICE_READ_ONLY;
                case 9:
                    return ERROR_REASON_UNKNOWN_CAVEAT;
                case 10:
                    return ERROR_REASON_INVALID_SUBJECT_TYPE;
                case 11:
                    return ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERROR;
                case 12:
                    return ERROR_REASON_UPDATES_ON_SAME_RELATIONSHIP;
                case 13:
                    return ERROR_REASON_CANNOT_UPDATE_PERMISSION;
                case 14:
                    return ERROR_REASON_CAVEAT_EVALUATION_ERROR;
                case 15:
                    return ERROR_REASON_INVALID_CURSOR;
                case 16:
                    return ERROR_REASON_TOO_MANY_RELATIONSHIPS_FOR_TRANSACTIONAL_DELETE;
                case 17:
                    return ERROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE;
                case 18:
                    return ERROR_REASON_ATTEMPT_TO_RECREATE_RELATIONSHIP;
                case 19:
                    return ERROR_REASON_MAXIMUM_DEPTH_EXCEEDED;
                case 20:
                    return ERROR_REASON_SERIALIZATION_FAILURE;
                case 21:
                    return ERROR_REASON_TOO_MANY_CHECKS_IN_REQUEST;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ErrorReason> internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<ErrorReason> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<ErrorReason>() {

            public ErrorReason findValueByNumber(int number) {
                return ErrorReason.forNumber(number);
            }
        };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
            }
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
            return com.authzed.api.v1.ErrorReasonOuterClass.getDescriptor().getEnumTypes().get(0);
        }

        private static final ErrorReason[] VALUES = values();

        public static ErrorReason valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private ErrorReason(int value) {
            this.value = value;
        }
    }

    public static com.google.protobuf.Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor descriptor;

    static {
        java.lang.String[] descriptorData = { "\n!authzed/api/v1/error_reason.proto\022\016aut"
                + "hzed.api.v1*\305\007\n\013ErrorReason\022\034\n\030ERROR_REA"
                + "SON_UNSPECIFIED\020\000\022#\n\037ERROR_REASON_SCHEMA"
                + "_PARSE_ERROR\020\001\022\"\n\036ERROR_REASON_SCHEMA_TY"
                + "PE_ERROR\020\002\022#\n\037ERROR_REASON_UNKNOWN_DEFIN" + "ITION\020\003\022/\n+ERROR_REASON_UNKNOWN_RELATION"
                + "_OR_PERMISSION\020\004\022,\n(ERROR_REASON_TOO_MAN" + "Y_UPDATES_IN_REQUEST\020\005\0222\n.ERROR_REASON_T"
                + "OO_MANY_PRECONDITIONS_IN_REQUEST\020\006\0225\n1ER" + "ROR_REASON_WRITE_OR_DELETE_PRECONDITION_"
                + "FAILURE\020\007\022\"\n\036ERROR_REASON_SERVICE_READ_O"
                + "NLY\020\010\022\037\n\033ERROR_REASON_UNKNOWN_CAVEAT\020\t\022%"
                + "\n!ERROR_REASON_INVALID_SUBJECT_TYPE\020\n\022,\n" + "(ERROR_REASON_CAVEAT_PARAMETER_TYPE_ERRO"
                + "R\020\013\022-\n)ERROR_REASON_UPDATES_ON_SAME_RELA" + "TIONSHIP\020\014\022)\n%ERROR_REASON_CANNOT_UPDATE"
                + "_PERMISSION\020\r\022(\n$ERROR_REASON_CAVEAT_EVA"
                + "LUATION_ERROR\020\016\022\037\n\033ERROR_REASON_INVALID_"
                + "CURSOR\020\017\022@\n<ERROR_REASON_TOO_MANY_RELATI" + "ONSHIPS_FOR_TRANSACTIONAL_DELETE\020\020\022.\n*ER"
                + "ROR_REASON_MAX_RELATIONSHIP_CONTEXT_SIZE" + "\020\021\0221\n-ERROR_REASON_ATTEMPT_TO_RECREATE_R"
                + "ELATIONSHIP\020\022\022\'\n#ERROR_REASON_MAXIMUM_DE" + "PTH_EXCEEDED\020\023\022&\n\"ERROR_REASON_SERIALIZA"
                + "TION_FAILURE\020\024\022+\n\'ERROR_REASON_TOO_MANY_" + "CHECKS_IN_REQUEST\020\025BH\n\022com.authzed.api.v"
                + "1Z2github.com/authzed/authzed-go/proto/a" + "uthzed/api/v1b\006proto3" };
        descriptor = com.google.protobuf.Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData,
                new com.google.protobuf.Descriptors.FileDescriptor[] {});
    }
    // @@protoc_insertion_point(outer_class_scope)
}
